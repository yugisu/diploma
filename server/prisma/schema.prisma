datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

enum UserWorkspaceRole {
  CREATOR
  ADMIN
  USER
}

enum ProfileStatus {
  CREATED
  ACTIVE
  SUSPENDED
}

// TODO: Make it a table so it can be configured by users
enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  QA
  DONE
}

enum ActivityParticipantStatus {
  ACTIVE
  KICKED
  BLOCKED
}

enum ActivityParticipantRole {
  OWNER
  ADMIN
  DEFAULT
}

model Workspace {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  name         String
  //
  userProfiles Profile[]
  //
  activities   Activity[]
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  name         String
  email        String        @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  password     String
  //
  profiles     Profile[]
  //
  userSessions UserSession[]
}

model UserSession {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  endedAt   DateTime?
  //
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  //
  profileId String?
  profile   Profile?  @relation(fields: [profileId], references: [id])
}

model Profile {
  id           String                @id @default(cuid())
  createdAt    DateTime              @default(now())
  userRole     UserWorkspaceRole     @default(USER)
  status       ProfileStatus         @default(CREATED)
  //
  userId       String
  user         User                  @relation(fields: [userId], references: [id])
  //
  workspaceId  String
  workspace    Workspace             @relation(fields: [workspaceId], references: [id])
  //
  userSessions UserSession[]
  //
  activities   ActivityParticipant[]

  @@unique([userId, workspaceId])
}

model ActivityParticipant {
  id         String                    @id @default(cuid())
  createdAt  DateTime                  @default(now())
  customName String?
  status     ActivityParticipantStatus @default(ACTIVE)
  role       ActivityParticipantRole   @default(DEFAULT)
  //
  activityId String
  activity   Activity                  @relation(fields: [activityId], references: [id])
  //
  profileId  String
  profile    Profile                   @relation(fields: [profileId], references: [id])
  //
  messages   Message[]

  @@unique([activityId, profileId])
}

model Activity {
  id           String                @id @default(cuid())
  createdAt    DateTime              @default(now())
  title        String?
  //
  workspaceId  String
  workspace    Workspace             @relation(fields: [workspaceId], references: [id])
  //
  participants ActivityParticipant[]
  //
  task         Task?
  //
  conversation Conversation?
}

// TODO: Implement task ordering
model Task {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  body       String?
  status     TaskStatus @default(TODO)
  //
  activityId String
  activity   Activity   @relation(fields: [activityId], references: [id])
}

model Conversation {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  //
  activityId String
  activity   Activity  @relation(fields: [activityId], references: [id])
  //
  messages   Message[]
}

model Message {
  id                     String              @id @default(cuid())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  content                String
  //
  createdByParticipantId String
  createdByParticipant   ActivityParticipant @relation(fields: [createdByParticipantId], references: [id])
  //
  conversationId         String
  conversation           Conversation        @relation(fields: [conversationId], references: [id])
}
