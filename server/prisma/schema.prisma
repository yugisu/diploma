datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

enum UserWorkspaceRole {
  CREATOR
  ADMIN
  USER
}

enum ProfileStatus {
  CREATED
  ACTIVE
  SUSPENDED
}

// TODO: Make it a table so it can be configured by users
enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  QA
  DONE
  INFO
}

model Workspace {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  name         String
  //
  userProfiles Profile[]
  //
  tasks        Task[]
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  name         String
  email        String        @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  password     String
  //
  profiles     Profile[]
  //
  userSessions UserSession[]
}

model UserSession {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  endedAt   DateTime?
  //
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  //
  profileId String?
  profile   Profile?  @relation(fields: [profileId], references: [id])
}

model Profile {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now())
  userRole                UserWorkspaceRole         @default(USER)
  status                  ProfileStatus             @default(CREATED)
  //
  userId                  String
  user                    User                      @relation(fields: [userId], references: [id])
  //
  workspaceId             String
  workspace               Workspace                 @relation(fields: [workspaceId], references: [id])
  //
  userSessions            UserSession[]
  //
  createdByConversations  Conversation[]            @relation(name: "ConversationCreatorProfile")
  //
  conversationParticipant ConversationParticipant[]
  //
  messages                Message[]                 @relation("MessageCreatedByProfile")
  //
  createdByTasks          Task[]                    @relation(name: "TaskCreatedByProfile")
  //
  assignedToTasks         TaskAssignee[]

  @@unique([userId, workspaceId])
}

model ConversationParticipant {
  createdAt      DateTime     @default(now())
  //
  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id])
  //
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([profileId, conversationId])
}

model Conversation {
  id               String                    @id @default(cuid())
  createdAt        DateTime                  @default(now())
  title            String?
  //
  createdById      String
  createdByProfile Profile                   @relation(name: "ConversationCreatorProfile", fields: [createdById], references: [id])
  //
  participants     ConversationParticipant[]
  //
  messages         Message[]
  //
  task             Task?
}

model Message {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  changedAt        DateTime     @default(now())
  content          String
  //
  createdById      String
  createdByProfile Profile      @relation(name: "MessageCreatedByProfile", fields: [createdById], references: [id])
  //
  conversationId   String
  conversation     Conversation @relation(fields: [conversationId], references: [id])
}

model TaskAssignee {
  createdAt DateTime @default(now())
  //
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id])
  //
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])

  @@id([profileId, taskId])
}

model Task {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  title            String?
  body             String?
  status           TaskStatus     @default(TODO)
  //
  createdById      String
  createdByProfile Profile        @relation(name: "TaskCreatedByProfile", fields: [createdById], references: [id])
  //
  workspaceId      String
  workspace        Workspace      @relation(fields: [workspaceId], references: [id])
  //
  assignees        TaskAssignee[]
  //
  conversationId   String?
  conversation     Conversation?  @relation(fields: [conversationId], references: [id])
}
