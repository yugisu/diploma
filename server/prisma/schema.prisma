datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

enum UserWorkspaceRole {
  CREATOR
  ADMIN
  USER
}

enum ProfileStatus {
  CREATED
  ACTIVE
  SUSPENDED
}

model Workspace {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  name         String
  //
  userProfiles Profile[]
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  name         String
  email        String        @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  password     String
  //
  profiles     Profile[]
  //
  userSessions UserSession[]
}

model UserSession {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  endedAt   DateTime?
  //
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  //
  profileId String?
  profile   Profile?  @relation(fields: [profileId], references: [id])
}

model Profile {
  id                     String            @id @default(cuid())
  createdAt              DateTime          @default(now())
  userRole               UserWorkspaceRole @default(USER)
  status                 ProfileStatus     @default(CREATED)
  //
  userId                 String
  user                   User              @relation(fields: [userId], references: [id])
  //
  workspaceId            String
  workspace              Workspace         @relation(fields: [workspaceId], references: [id])
  //
  userSessions           UserSession[]
  //
  createdByTasks         Task[]            @relation(name: "TaskCreatedByProfile")
  //
  assignedToTasks        Task[]            @relation(name: "TaskAssigneesProfiles")
  //
  createdByConversations Conversation[]    @relation(name: "ConversationCreatorProfile")
  //
  conversations          Conversation[]    @relation(name: "ConversationParticipant")
  //
  messages               Message[]         @relation("MessageCreatedByProfile")

  @@unique([userId, workspaceId])
}

model Task {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  title             String?
  body              String?
  //
  createdById       String
  createdByProfile  Profile       @relation(name: "TaskCreatedByProfile", fields: [createdById], references: [id])
  //
  assigneesProfiles Profile[]     @relation(name: "TaskAssigneesProfiles")
  //
  conversationId    String?
  conversation      Conversation? @relation(fields: [conversationId], references: [id])
}

model Conversation {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  title                String?
  //
  createdById          String
  createdByProfile     Profile   @relation(name: "ConversationCreatorProfile", fields: [createdById], references: [id])
  //
  participantsProfiles Profile[] @relation(name: "ConversationParticipant")
  //
  messages             Message[]
  //
  task                 Task?
}

model Message {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  changedAt        DateTime     @default(now())
  content          String
  //
  createdById      String
  createdByProfile Profile      @relation(name: "MessageCreatedByProfile", fields: [createdById], references: [id])
  //
  conversationId   String
  conversation     Conversation @relation(fields: [conversationId], references: [id])
}
