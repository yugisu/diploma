datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/typegraphql-prisma"
}

enum UserWorkspaceRole {
  CREATOR
  ADMIN
  USER
}

enum ProfileStatus {
  CREATED
  ACTIVE
  SUSPENDED
}

model Workspace {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String

  userProfiles Profile[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  email     String   @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  password  String

  profiles Profile[]

  userSessions UserSession[]
}

model UserSession {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  endedAt   DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id])
}

model Profile {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  userRole  UserWorkspaceRole @default(USER)
  status    ProfileStatus     @default(CREATED)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  userSessions UserSession[]

  @@unique([userId, workspaceId])
}
